# Copyright (c) 0235 Inc.
# This file is licensed under the karakuri_agent Personal Use & No Warranty License.
# Please see the LICENSE file in the project root.
services:
  karakuri-agent-server:
    container_name: "karakuri-agent-server"
    volumes:
      - ./:/app
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - 8080:8080
    networks:
      - karakuri-agent-network
    depends_on:
      - redis
      - zep

  redis:
    container_name: "karakuri-redis"
    image: redis:7.2
    ports:
      - "6378:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - karakuri-agent-network
    deploy:
      resources:
        limits:
          memory: 512M
    volumes:
      - redis_data:/data
  zep:
    container_name: "karakuri-zep"
    image: zepai/zep:latest
    ports:
      - "8000:8000"
    volumes:
      - ./zep.yaml:/app/zep.yaml
    environment:
      - ZEP_CONFIG_FILE=zep.yaml
      - ZEP_API_SECRET=${ZEP_API_SECRET}
    networks:
      - karakuri-agent-network
    depends_on:
      graphiti:
        condition: service_healthy
      db:
        condition: service_healthy
  db:
    container_name: "karakuri-zep-ce-postgres"
    image: ankane/pgvector:v0.5.1
    restart: on-failure
    shm_size: "128mb" # Increase this if vacuuming fails with a "no space left on device" error
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - karakuri-agent-network
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - zep-db:/var/lib/postgresql/data
    ports:
      - "5432:5432"
  graphiti:
    container_name: "karakuri-graphiti"
    image: zepai/graphiti:0.3
    ports:
      - "8003:8003"
    env_file:
      - .env
    networks:
      - karakuri-agent-network
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import urllib.request; urllib.request.urlopen('http://localhost:8003/healthcheck')",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      neo4j:
        condition: service_healthy
    environment:
      - OPENAI_BASE_URL=${ZEP_OPENAI_BASE_URL}
      - OPENAI_API_KEY=${ZEP_OPENAI_API_KEY}
      - MODEL_NAME=${ZEP_OPENAI_MODEL_NAME}
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=zepzepzep
      - PORT=8003
  neo4j:
    container_name: "karakuri-neo4j"
    image: neo4j:5.22.0
    networks:
      - karakuri-agent-network
    healthcheck:
      test: wget http://localhost:7687 || exit 1
      interval: 1s
      timeout: 10s
      retries: 20
      start_period: 3s
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
    environment:
      - NEO4J_AUTH=neo4j/zepzepzep
volumes:
  redis_data:
  neo4j_data:
  zep-db:

networks:
  karakuri-agent-network:
    driver: bridge